[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Request",
  "enabled": 1,
  "modified": "2021-07-16 05:15:08.263082",
  "name": "Service Request-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "// Copyright (c) 2021, proman_app and contributors\n// For license information, please see license.txt\nfrappe.provide(\"erpnext.accounts.dimensions\");\nfrappe.ui.form.on('Service Request', {\nsetup: function(frm) {\nfrm.custom_make_buttons = {\n'Purchase Order': 'Purchase Order'\n};\n\n// formatter for service request item\nfrm.set_indicator_formatter('item_code',\nfunction(doc) { return (doc.stock_qty<=doc.ordered_qty) ? \"green\" : \"orange\"; });\n\nfrm.set_query(\"item_code\", \"items\", function() {\nreturn {\nquery: \"erpnext.controllers.queries.item_query\"\n};\n});\n\nfrm.set_query(\"from_warehouse\", \"items\", function(doc) {\nreturn {\nfilters: {'company': doc.company}\n};\n});\n\nfrm.set_query(\"bom_no\", \"items\", function(doc, cdt, cdn) {\nvar row = locals[cdt][cdn];\nreturn {\nfilters: {\n\"item\": row.item_code\n}\n};\n});\n},\nonload: function(frm) {\n// add item, if previous view was item\nerpnext.utils.add_item(frm);\n\n// set schedule_date\nset_schedule_date(frm);\n\n\nfrm.set_query(\"warehouse\", \"items\", function(doc) {\nreturn {\nfilters: {'company': doc.company}\n};\n});\n\nfrm.set_query(\"set_warehouse\", function(doc){\nreturn {\nfilters: {'company': doc.company}\n};\n});\n\nerpnext.accounts.dimensions.setup_dimension_filters(frm, frm.doctype);\n},\nrefresh: function(frm) {\nfrm.events.make_custom_buttons(frm);\n},\nmake_custom_buttons: function(frm) {\n\nif (frm.doc.docstatus == 1 && frm.doc.status != 'Stopped') {\nif (flt(frm.doc.per_ordered, 2) < 100) {\n\nif (frm.doc.material_request_type === \"Purchase\") {\nfrm.add_custom_button(__('Purchase Order'),\n() => frm.events.make_purchase_order(frm), __('Create'));\n}\n\nfrm.page.set_inner_btn_group_as_primary(__('Create'));\n\n\n}\n}\n\n\nif (frm.doc.docstatus == 1 && frm.doc.status == 'Stopped') {\nfrm.add_custom_button(__('Re-open'), () => frm.events.update_status(frm, 'Submitted'));\n}\n},\nupdate_status: function(frm, stop_status) {\nfrappe.call({\nmethod: 'proman.proman.doctype.service_request.service_request.update_status',\nargs: { name: frm.doc.name, status: stop_status },\ncallback(r) {\nif (!r.exc) {\nfrm.reload_doc();\n}\n}\n});\n},\nget_item_data: function(frm, item, overwrite_warehouse=false) {\nif (item && !item.item_code) { return; }\nfrm.call({\nmethod: \"erpnext.stock.get_item_details.get_item_details\",\nchild: item,\nargs: {\nargs: {\nitem_code: item.item_code,\nfrom_warehouse: item.from_warehouse,\nwarehouse: item.warehouse,\ndoctype: frm.doc.doctype,\nbuying_price_list: frappe.defaults.get_default('buying_price_list'),\ncurrency: frappe.defaults.get_default('Currency'),\nname: frm.doc.name,\nqty: item.qty || 1,\nstock_qty: item.stock_qty,\ncompany: frm.doc.company,\nconversion_rate: 1,\nmaterial_request_type: frm.doc.material_request_type,\nplc_conversion_rate: 1,\n//rate: item.rate,\nconversion_factor: item.conversion_factor\n},\noverwrite_warehouse: overwrite_warehouse\n},\ncallback: function(r) {\nconst d = item;\nconst qty_fields = ['actual_qty', 'projected_qty', 'min_order_qty'];\n\nif(!r.exc) {\n$.each(r.message, function(k, v) {\nif(!d[k] || in_list(qty_fields, k)) d[k] = v;\n});\n}\n}\n});\n},\nmake_purchase_order: function(frm) {\nfrappe.prompt(\n{\nlabel: __('For Default Supplier (Optional)'),\nfieldname:'default_supplier',\nfieldtype: 'Link',\noptions: 'Supplier',\ndescription: __('Select a Supplier from the Default Suppliers of the items below. On selection, a Purchase Order will be made against items belonging to the selected Supplier only.'),\nget_query: () => {\nreturn{\nquery: \"proman.proman.doctype.service_request.service_request.get_default_supplier_query\",\nfilters: {'doc': frm.doc.name}\n}\n}\n},\n(values) => {\nfrappe.model.open_mapped_doc({\nmethod: \"proman.proman.doctype.service_request.service_request.make_purchase_order\",\nfrm: frm,\nargs: { default_supplier: values.default_supplier },\nrun_link_triggers: true\n});\n},\n__('Enter Supplier'),\n__('Create')\n);\n},\ntc_name: function(frm) {\n   if(frm.doc.tc_name){\n       frappe.call({\n    method: 'erpnext.setup.doctype.terms_and_conditions.terms_and_conditions.get_terms_and_conditions',\n    args: {\n    template_name: frm.doc.tc_name,\n    doc: frm.doc\n    },\n    callback: function(r) {\n       frm.set_value(\"terms\",r.message);\n    }\n    });\n}\n},\nset_warehouse:function(frm){\n    // set_warehouse(frm);\n}\n});\n\n\nfrappe.ui.form.on(\"Service Request Item\", {\nqty: function (frm, doctype, name) {\nvar d = locals[doctype][name];\nif (flt(d.qty) < flt(d.min_order_qty)) {\nfrappe.msgprint(__(\"Warning: Service Requested Qty is less than Minimum Order Qty\"));\n}\n\nconst item = locals[doctype][name];\nfrm.events.get_item_data(frm, item, false);\n},\n\nfrom_warehouse: function(frm, doctype, name) {\nconst item = locals[doctype][name];\nfrm.events.get_item_data(frm, item, false);\n},\n\nwarehouse: function(frm, doctype, name) {\nconst item = locals[doctype][name];\nfrm.events.get_item_data(frm, item, false);\n},\n\nrate: function(frm, doctype, name) {\nvar cur_grid =frm.get_field('items').grid;\nvar cur_doc = locals[doctype][name];\nvar cur_row = cur_grid.get_row(cur_doc.name);\ncur_row.doc.amount=cur_row.doc.rate*cur_row.doc.qty;\ncur_frm.refresh_field('items');\n},\n\nitem_code: function(frm, doctype, name) {\nconst item = locals[doctype][name];\nset_schedule_date(frm);\nset_warehouse_details(frm, doctype,name);\nfrm.events.get_item_data(frm, item, true);\n},\n    items_add: function(doc, cdt, cdn) {\nvar row = frappe.get_doc(cdt, cdn);\nif(doc.schedule_date) {\nrow.schedule_date = doc.schedule_date;\nrefresh_field(\"schedule_date\", cdn, \"items\");\n} else {\ncur_frm.script_manager.copy_from_first_row(\"items\", row, [\"schedule_date\"]);\n}\nif(doc.set_warehouse){\n    row.warehouse = doc.set_warehouse;\n    refresh_field(\"warehouse\", cdn, \"items\");\n} else {\n    cur_frm.script_manager.copy_from_first_row(\"items\", row, [\"warehouse\"]);\n}\n},\n\nitems_on_form_rendered: function() {\nset_schedule_date(frm);\n},\n\nschedule_date: function( frm) {\nset_schedule_date(frm);\n}\n});\n\nfunction set_schedule_date(frm) {\nif(frm.doc.schedule_date){\nerpnext.utils.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"schedule_date\");\n}\n}\n\nfunction set_warehouse_details(frm, doctype,name){\n    var row = frappe.get_doc(doctype, name);\n   if(frm.doc.set_warehouse){\n      row.warehouse = frm.doc.set_warehouse;\n    refresh_field(\"warehouse\", name, \"items\");\n} \n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2021-03-03 11:35:44.734707",
  "name": "Employee-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Employee', {\n\tbefore_save: function(frm){\n\t    var todays_date = new Date()\n\t    if(frm.doc.posting_date < get_today()){\n\t        frappe.throw(\"Cannot select past date.\")\n\t    }\n\t}\n})",
  "view": null
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2021-03-30 17:56:55.168045",
  "name": "Work Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Work Order', {\n\tonload(frm) {\n\t\tif(frm.doc.status==\"Stopped\"){\n\t\tfrm.disable_save()\n\t\t}\n\t}\n})",
  "view": null
 }
]