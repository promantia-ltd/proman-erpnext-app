[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Employee",
  "enabled": 1,
  "modified": "2021-03-03 11:35:44.734707",
  "name": "Employee-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Employee', {\n\tbefore_save: function(frm){\n\t    var todays_date = new Date()\n\t    if(frm.doc.posting_date < get_today()){\n\t        frappe.throw(\"Cannot select past date.\")\n\t    }\n\t}\n})",
  "view": null
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2021-03-30 17:56:55.168045",
  "name": "Work Order-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "frappe.ui.form.on('Work Order', {\n\tonload(frm) {\n\t\tif(frm.doc.status==\"Stopped\"){\n\t\tfrm.disable_save()\n\t\t}\n\t}\n})",
  "view": null
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Quotation",
  "enabled": 1,
  "modified": "2017-05-25 14:25:40.221897",
  "name": "Quotation-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "cur_frm.add_fetch('quotation','value','value');\ncur_frm.add_fetch('quotation','closing_date','closing_date');\ncur_frm.add_fetch('quotation','opportunity_purpose','opportunity_purpose');\ncur_frm.add_fetch('quotation','buying_status','buying_status');\ncur_frm.add_fetch('quotation','stage','stage');\ncur_frm.add_fetch('quotation','competition_status','competition_status');\ncur_frm.add_fetch('quotation','support_needed','support_needed');\n\nfrappe.ui.form.on(\"Quotation\", \"refresh\", function(frm) {\n              cur_frm.add_custom_button(__(\"Make Communication\"), function() {\n\t\t\tfrappe.route_options = {\n\t\t\t\treference_doctype: \"Quotation\",\n                        \treference_name: cur_frm.doc.name,\n                                recipients: cur_frm.doc.contact_email,\n                                phone_no: cur_frm.doc.contact_mobile\n\t\t\t}\n\t\t\tfrappe.set_route(\"List\", \"Communication\");\n\t\t});\n               cur_frm.add_custom_button(__(\"Make ToDo\"), function() {\n\t\t\t\n\t\t\tfrappe.set_route(\"List\", \"ToDo\");\n\t\t});\n       \n});\n\nfrappe.ui.form.on(\"Quotation\", \"refresh\", function(frm) {\n        cur_frm.add_custom_button(__('Make Interactions'), cur_frm.cscript['Make Interactions'], __(\"Make\"));\n\t             \n});\n\ncur_frm.cscript['Make Interactions'] = function(cdt, cdn) {\n    frappe.model.open_mapped_doc({\n        method: \"nhance.api.make_interactions_quot\",\n        frm: cur_frm,\n\t\n    })\n}\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Note",
  "enabled": 1,
  "modified": "2021-07-03 10:37:56.333282",
  "name": "Delivery Note-Client",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "//revision_number\n\nfrappe.ui.form.on(\"Delivery Note Item\", {\n\n\n    batch_no: function(frm, cdt, cdn) {\n        console.log(\"-----------\");\n        //cur_frm.refresh_field(\"items\")\n        var d = locals[cdt][cdn];\n        var item_code = d.item_code;\n\n        var batch_no = d.batch_no;\n        var revision_no = d.revision_number;\n\n        console.log(\"revision_no----------------\" + revision_no);\n\n\n\n        var HasSerialNumber = null;\n        HasSerialNumber = fetch_has_serial_no(item_code);\n        console.log(\"HasSerialNumber\", HasSerialNumber);\n        var HasBatchNumber = null;\n        HasBatchNumber = fetch_has_batch_no(item_code);\n        console.log(\"HasBatchNumber\", HasBatchNumber);\n        var HasRevisionNumber = null;\n        HasRevisionNumber = fetch_has_revision_number(batch_no);\n        console.log(\"HasRevisionNumber\", HasRevisionNumber);\n\n        if ((HasRevisionNumber != null || HasRevisionNumber != undefined || HasRevisionNumber != \"\") && HasBatchNumber == 1) {\n            d.revision_number = HasRevisionNumber;\n        }\n        var df = frappe.meta.get_docfield(\"Delivery Note Item\", \"revision_number\", cur_frm.doc.name);\n\n        df.read_only = 1;\n        cur_frm.refresh_field(\"items\")\n    }\n\n\n})\n\n\nfrappe.ui.form.on(\"Delivery Note Item\", {\n\n\n   serial_no: function(frm, cdt, cdn) {\n        console.log(\"-----------\");\n        //cur_frm.refresh_field(\"items\")\n        var d = locals[cdt][cdn];\n        var item_code = d.item_code;\n\n        var batch_no = d.batch_no;\n        var revision_no = d.revision_number;\n\n        //console.log(\"revision_no----------------\" + revision_no);\n\n\tvar serial_no = d.serial_no;\n\n        //console.log(\"revision_no----------------\" + revision_no);\n\n\n        var HasSerialNumber = null;\n        HasSerialNumber = fetch_has_serial_no(item_code);\n        //console.log(\"HasSerialNumber\", HasSerialNumber);\n        var HasBatchNumber = null;\n        HasBatchNumber = fetch_has_batch_no(item_code);\n        //console.log(\"HasBatchNumber\", HasBatchNumber);\n        var HasRevisionNumberSerial = null;\n        HasRevisionNumberSerial = fetch_has_revision_number_serial(serial_no) ;\n        //console.log(\"HasRevisionNumberSerial\", HasRevisionNumberSerial);\n\n        if ((HasRevisionNumberSerial != null || HasRevisionNumberSerial != undefined || HasRevisionNumberSerial != \"\") && HasSerialNumber == 1) {\n            d.revision_number = HasRevisionNumberSerial;\n        }\n        var df = frappe.meta.get_docfield(\"Delivery Note Item\", \"revision_number\", cur_frm.doc.name);\n\n        df.read_only = 1;\n        cur_frm.refresh_field(\"items\")\n}\n\n})\n\n function fetch_has_serial_no(item_code) {\n    //console.log(\"entered into function\");\n    var has_serial_no = \"\";\n    frappe.call({\n        method: 'frappe.client.get_value',\n        args: {\n            'doctype': 'Item',\n            'fieldname': [\"has_serial_no\", \"item_code\"],\n\n            'filters': {\n                item_code: item_code,\n            }\n        },\n        async: false,\n        callback: function(r) {\n            if (r.message) {\n                has_serial_no = r.message.has_serial_no;\n                //console.log(has_serial_no);\n                //console.log(\"readings-----------\" + JSON.stringify(r.message));\n\n            }\n        }\n    });\n    return has_serial_no\n}\n\n\nfunction fetch_has_batch_no(item_code) {\n    //console.log(\"entered into has_batch_no function\");\n    var has_batch_no = \"\";\n    frappe.call({\n        method: 'frappe.client.get_value',\n        args: {\n            'doctype': 'Item',\n            'fieldname': [\"has_batch_no\", \"item_code\"],\n\n            'filters': {\n                item_code: item_code,\n            }\n        },\n        async: false,\n        callback: function(r) {\n            if (r.message) {\n                has_batch_no = r.message.has_batch_no;\n                //console.log(has_batch_no);\n                //console.log(\"readings-----------\" + JSON.stringify(r.message));\n\n            }\n        }\n    });\n    return has_batch_no\n}\n\nfunction fetch_has_revision_number(batch_no) {\n    //console.log(\"entered into fetch_has_revision_number function\");\n    var has_revision_number = \"\";\n    frappe.call({\n        method: 'frappe.client.get_value',\n        args: {\n            'doctype': 'Batch',\n            'fieldname': [\"revision_number\", \"name\"],\n\n            'filters': {\n                name: batch_no,\n            }\n        },\n        async: false,\n        callback: function(r) {\n            if (r.message) {\n                has_revision_number = r.message.revision_number;\n                //console.log(has_revision_number);\n                //console.log(\"readings-----------\" + JSON.stringify(r.message));\n\n            }\n        }\n    });\n    return has_revision_number\n}\n\n\nfunction fetch_has_revision_number_serial(serial_no) {\n    //console.log(\"entered into fetch_has_revision_number_serial function\");\n    var has_revision_number_serial = \"\";\n    frappe.call({\n           method: 'frappe.client.get_value',\n         args: {\n            'doctype': 'Serial No',\n            'fieldname': [\"revision_number\", \"serial_no\"],\n\n            'filters': {\n                name: serial_no,\n            }\n        },\n        async: false,\n        callback: function(r) {\n            if (r.message) {\n                has_revision_number_serial = r.message.revision_number;\n                //console.log(has_revision_number_serial);\n                //console.log(\"readings-----------\" + JSON.stringify(r.message));\n\n            }\n        }\n    });\n    return has_revision_number_serial\n}\nfrappe.ui.form.on(\"Delivery Note\", \"after_save\", function(frm, cdt, cdn) {\n\n    $.each(frm.doc.items, function(i, d) {\n        var item_code = d.item_code;\n        var revision_number = d.revision_number;\n        //console.log(\"revision_number\", revision_number);\n        if (revision_number != \"\") {\n            var df = frappe.meta.get_docfield(\"Delivery Note Item\", \"revision_number\", cur_frm.doc.name);\n\n            df.read_only = 1;\n        }\n    })\n});\n\n//check item has batch or serial number\n//To check item has serial or batch number\nfrappe.ui.form.on(\"Delivery Note\", \"after_save\", function(frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    //console.log(\"Entered------\" + d);\n    ////console.log(\"..........\"+JSON.stringify(d));\n    var purpose = frm.doc.purpose;\n    //console.log(\"purpose....\" + purpose);\n    var items = frm.doc.items;\n    // //console.log(\"items.....\"+JSON.stringify(items));\n    for (var i = 0; i < items.length; i++) {\n        var item_code = items[i]['item_code'];\n        var source_warehouse = items[i]['s_warehouse'];\n        //console.log(\"source_warehouse..\" + source_warehouse);\n        var target_warehouse = items[i]['t_warehouse'];\n        //console.log(\"target_warehouse..\" + target_warehouse);\n        var serial_no = items[i]['serial_no'];\n        //console.log(\"serial_no..\" + serial_no);\n        var child_received_qty = items[i]['qty'];\n        //console.log(\"child_received_qty\", child_received_qty);\n        var HasSerialNumber = null;\n        HasSerialNumber = fetch_has_serial_no(item_code);\n        //console.log(\"HasSerialNumber\", HasSerialNumber);\n\tvar HasBatchNumber = null;\n        HasBatchNumber = fetch_has_batch_no(item_code);\n        //console.log(\"HasBatchNumber\", HasBatchNumber);\n\tif(HasSerialNumber == 1 ||HasBatchNumber==1){\n        //console.log(\"item has batch or serial number make feild mandondatory\");\n   \tcur_frm.fields_dict.items.grid.toggle_reqd(\"revision_number\", true)\n        }\n\telse{\n\tconsole.log(\"item has no  batch or no serial number don't make feild mandondatory\");\n\n}//end of else\n    }//end of for loop\n});\n\nfunction fetch_has_serial_no(item_code) {\n    //console.log(\"entered into function\");\n    var has_serial_no = \"\";\n    frappe.call({\n        method: 'frappe.client.get_value',\n        args: {\n            'doctype': 'Item',\n            'fieldname': [\"has_serial_no\", \"item_code\"],\n\n            'filters': {\n                item_code: item_code,\n            }\n        },\n        async: false,\n        callback: function(r) {\n            if (r.message) {\n                has_serial_no = r.message.has_serial_no;\n                //console.log(has_serial_no);\n                //console.log(\"readings-----------\" + JSON.stringify(r.message));\n\n            }\n        }\n    });\n    return has_serial_no\n}\n\n\nfunction fetch_has_batch_no(item_code) {\n    //console.log(\"entered into has_batch_no function\");\n    var has_batch_no = \"\";\n    frappe.call({\n        method: 'frappe.client.get_value',\n        args: {\n            'doctype': 'Item',\n            'fieldname': [\"has_batch_no\", \"item_code\"],\n\n            'filters': {\n                item_code: item_code,\n            }\n        },\n        async: false,\n        callback: function(r) {\n            if (r.message) {\n                has_batch_no = r.message.has_batch_no;\n                //console.log(has_batch_no);\n                //console.log(\"readings-----------\" + JSON.stringify(r.message));\n\n            }\n        }\n    });\n    return has_batch_no\n}\n\n\n//available qty from stock ledger entry\n\nfrappe.ui.form.on(\"Delivery Note\", \"before_save\", function(frm, cdt, cdn) {\n    var d = locals[cdt][cdn];\n    var customer = frm.doc.customer;\n    //console.log(\"customer\", customer);\n    var company = frm.doc.company;\n    //console.log(\"company\", company);\n    var items = frm.doc.items;\n\n    for (var j = 0; j < items.length; j++) {\n        var item_code = items[j]['item_code'];\n        //console.log(\"item_code\", item_code);\n        var status = frm.doc.docstatus;\n        //console.log(\"status\", status);\n        var name = frm.doc.name;\n        //console.log(\"name\", name);\n        var warehouse = items[j]['warehouse'];\n        //console.log(\"warehouse\", warehouse);\n        var posting_date1 = frm.doc.posting_date;\n        //console.log(\"posting_date1\", posting_date1);\n        var posting_time1 = frm.doc.posting_time;\n        //console.log(\"posting_time1\", posting_time1);\n\n        var combined_datetime = posting_date1 + \" \" + posting_time1;\n        //console.log(\"combined_datetime\", combined_datetime);\n        var converted_posting_date = new Date(combined_datetime).getTime();\n        //console.log(\"converted_posting_date\", converted_posting_date);\n        var available_qty_warehouse_date = fetch_qty_at_from_warehouse(item_code, warehouse);\n        //console.log(\"available_qty_warehouse_date\", available_qty_warehouse_date);\n        var available_qty_warehouse_date_beforePostingDate = [];\n        var available_qty_warehouse_date_beforePostingTime = [];\n        var heighest_date;\n        for (var z = 0; z < available_qty_warehouse_date.length; z++) {\n            //var dates=available_qty_warehouse_date[z];\n            available_qty_warehouse_date[z] = new Date(available_qty_warehouse_date[z]).getTime();\n            //console.log(\"date\", available_qty_warehouse_date[z], z);\n            if (available_qty_warehouse_date[z] <= converted_posting_date) {\n                available_qty_warehouse_date_beforePostingDate.push(available_qty_warehouse_date[z]);\n                //console.log(\"available_qty_warehouse_date_beforePostingDate\", available_qty_warehouse_date_beforePostingDate);\n\n            }\n            z = z + 1;\n        }\n        var sorted_date = available_qty_warehouse_date_beforePostingDate.sort();\n        //console.log(\"sorted_date\", sorted_date);\n\n        var heighest_date = sorted_date[sorted_date.length - 1];\n        //console.log(\"heighest_date\", heighest_date);\n        var qty;\n        for (var i = 0; i <= available_qty_warehouse_date.length; i++) {\n            if (heighest_date == available_qty_warehouse_date[i]) {\n                qty = available_qty_warehouse_date[i + 1];\n                //console.log(\"qty\", qty);\n            }\n        }\n\n\n        if (heighest_date != undefined) {\n            //console.log(\"entered in if block\");\n\n            items[j]['pch_available_qty_of_transcation_at_posting_date_and_time'] = qty;\n        } else {\n            //console.log(\"entered in else block\");\n            items[j]['pch_available_qty_of_transcation_at_posting_date_and_time'] = 0;\n        }\n        frm.refresh_field(\"items\")\n    }\n\n\n\n});\n\n\nfunction fetch_qty_at_from_warehouse(item_code, warehouse) {\n    var qty_after_transaction_posting_date = [];\n    frappe.call({\n        method: 'nhance.api.get_stock_qty',\n        args: {\n            \"item_code\": item_code,\n            \"warehouse\": warehouse\n\n        },\n        async: false,\n        callback: function(r) {\n            for (var i = 0; i < r.message.length; i++) {\n                qty_after_transaction_posting_date.push(r.message[i].date);\n                qty_after_transaction_posting_date.push(r.message[i].qty_after_transaction);\n\n            }\n\n\n        }\n    });\n    return qty_after_transaction_posting_date\n}\n\n\n\n\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Service Request",
  "enabled": 1,
  "modified": "2021-07-16 05:15:08.263082",
  "name": "Service Request-Form",
  "parent": null,
  "parentfield": null,
  "parenttype": null,
  "script": "// Copyright (c) 2021, proman_app and contributors\n// For license information, please see license.txt\nfrappe.provide(\"erpnext.accounts.dimensions\");\nfrappe.ui.form.on('Service Request', {\nsetup: function(frm) {\nfrm.custom_make_buttons = {\n'Purchase Order': 'Purchase Order'\n};\n\n// formatter for service request item\nfrm.set_indicator_formatter('item_code',\nfunction(doc) { return (doc.stock_qty<=doc.ordered_qty) ? \"green\" : \"orange\"; });\n\nfrm.set_query(\"item_code\", \"items\", function() {\nreturn {\nquery: \"erpnext.controllers.queries.item_query\"\n};\n});\n\nfrm.set_query(\"from_warehouse\", \"items\", function(doc) {\nreturn {\nfilters: {'company': doc.company}\n};\n});\n\nfrm.set_query(\"bom_no\", \"items\", function(doc, cdt, cdn) {\nvar row = locals[cdt][cdn];\nreturn {\nfilters: {\n\"item\": row.item_code\n}\n};\n});\n},\nonload: function(frm) {\n// add item, if previous view was item\nerpnext.utils.add_item(frm);\n\n// set schedule_date\nset_schedule_date(frm);\n\n\nfrm.set_query(\"warehouse\", \"items\", function(doc) {\nreturn {\nfilters: {'company': doc.company}\n};\n});\n\nfrm.set_query(\"set_warehouse\", function(doc){\nreturn {\nfilters: {'company': doc.company}\n};\n});\n\nerpnext.accounts.dimensions.setup_dimension_filters(frm, frm.doctype);\n},\nrefresh: function(frm) {\nfrm.events.make_custom_buttons(frm);\n},\nmake_custom_buttons: function(frm) {\n\nif (frm.doc.docstatus == 1 && frm.doc.status != 'Stopped') {\nif (flt(frm.doc.per_ordered, 2) < 100) {\n\nif (frm.doc.material_request_type === \"Purchase\") {\nfrm.add_custom_button(__('Purchase Order'),\n() => frm.events.make_purchase_order(frm), __('Create'));\n}\n\nfrm.page.set_inner_btn_group_as_primary(__('Create'));\n\n\n}\n}\n\n\nif (frm.doc.docstatus == 1 && frm.doc.status == 'Stopped') {\nfrm.add_custom_button(__('Re-open'), () => frm.events.update_status(frm, 'Submitted'));\n}\n},\nupdate_status: function(frm, stop_status) {\nfrappe.call({\nmethod: 'proman.proman.doctype.service_request.service_request.update_status',\nargs: { name: frm.doc.name, status: stop_status },\ncallback(r) {\nif (!r.exc) {\nfrm.reload_doc();\n}\n}\n});\n},\nget_item_data: function(frm, item, overwrite_warehouse=false) {\nif (item && !item.item_code) { return; }\nfrm.call({\nmethod: \"erpnext.stock.get_item_details.get_item_details\",\nchild: item,\nargs: {\nargs: {\nitem_code: item.item_code,\nfrom_warehouse: item.from_warehouse,\nwarehouse: item.warehouse,\ndoctype: frm.doc.doctype,\nbuying_price_list: frappe.defaults.get_default('buying_price_list'),\ncurrency: frappe.defaults.get_default('Currency'),\nname: frm.doc.name,\nqty: item.qty || 1,\nstock_qty: item.stock_qty,\ncompany: frm.doc.company,\nconversion_rate: 1,\nmaterial_request_type: frm.doc.material_request_type,\nplc_conversion_rate: 1,\n//rate: item.rate,\nconversion_factor: item.conversion_factor\n},\noverwrite_warehouse: overwrite_warehouse\n},\ncallback: function(r) {\nconst d = item;\nconst qty_fields = ['actual_qty', 'projected_qty', 'min_order_qty'];\n\nif(!r.exc) {\n$.each(r.message, function(k, v) {\nif(!d[k] || in_list(qty_fields, k)) d[k] = v;\n});\n}\n}\n});\n},\nmake_purchase_order: function(frm) {\nfrappe.prompt(\n{\nlabel: __('For Default Supplier (Optional)'),\nfieldname:'default_supplier',\nfieldtype: 'Link',\noptions: 'Supplier',\ndescription: __('Select a Supplier from the Default Suppliers of the items below. On selection, a Purchase Order will be made against items belonging to the selected Supplier only.'),\nget_query: () => {\nreturn{\nquery: \"proman.proman.doctype.service_request.service_request.get_default_supplier_query\",\nfilters: {'doc': frm.doc.name}\n}\n}\n},\n(values) => {\nfrappe.model.open_mapped_doc({\nmethod: \"proman.proman.doctype.service_request.service_request.make_purchase_order\",\nfrm: frm,\nargs: { default_supplier: values.default_supplier },\nrun_link_triggers: true\n});\n},\n__('Enter Supplier'),\n__('Create')\n);\n},\ntc_name: function(frm) {\n   if(frm.doc.tc_name){\n       frappe.call({\n    method: 'erpnext.setup.doctype.terms_and_conditions.terms_and_conditions.get_terms_and_conditions',\n    args: {\n    template_name: frm.doc.tc_name,\n    doc: frm.doc\n    },\n    callback: function(r) {\n       frm.set_value(\"terms\",r.message);\n    }\n    });\n}\n},\nset_warehouse:function(frm){\n    // set_warehouse(frm);\n}\n});\n\n\nfrappe.ui.form.on(\"Service Request Item\", {\nqty: function (frm, doctype, name) {\nvar d = locals[doctype][name];\nif (flt(d.qty) < flt(d.min_order_qty)) {\nfrappe.msgprint(__(\"Warning: Service Requested Qty is less than Minimum Order Qty\"));\n}\n\nconst item = locals[doctype][name];\nfrm.events.get_item_data(frm, item, false);\n},\n\nfrom_warehouse: function(frm, doctype, name) {\nconst item = locals[doctype][name];\nfrm.events.get_item_data(frm, item, false);\n},\n\nwarehouse: function(frm, doctype, name) {\nconst item = locals[doctype][name];\nfrm.events.get_item_data(frm, item, false);\n},\n\nrate: function(frm, doctype, name) {\nvar cur_grid =frm.get_field('items').grid;\nvar cur_doc = locals[doctype][name];\nvar cur_row = cur_grid.get_row(cur_doc.name);\ncur_row.doc.amount=cur_row.doc.rate*cur_row.doc.qty;\ncur_frm.refresh_field('items');\n},\n\nitem_code: function(frm, doctype, name) {\nconst item = locals[doctype][name];\nset_schedule_date(frm);\nset_warehouse_details(frm, doctype,name);\nfrm.events.get_item_data(frm, item, true);\n},\n    items_add: function(doc, cdt, cdn) {\nvar row = frappe.get_doc(cdt, cdn);\nif(doc.schedule_date) {\nrow.schedule_date = doc.schedule_date;\nrefresh_field(\"schedule_date\", cdn, \"items\");\n} else {\ncur_frm.script_manager.copy_from_first_row(\"items\", row, [\"schedule_date\"]);\n}\nif(doc.set_warehouse){\n    row.warehouse = doc.set_warehouse;\n    refresh_field(\"warehouse\", cdn, \"items\");\n} else {\n    cur_frm.script_manager.copy_from_first_row(\"items\", row, [\"warehouse\"]);\n}\n},\n\nitems_on_form_rendered: function() {\nset_schedule_date(frm);\n},\n\nschedule_date: function( frm) {\nset_schedule_date(frm);\n}\n});\n\nfunction set_schedule_date(frm) {\nif(frm.doc.schedule_date){\nerpnext.utils.copy_value_in_all_rows(frm.doc, frm.doc.doctype, frm.doc.name, \"items\", \"schedule_date\");\n}\n}\n\nfunction set_warehouse_details(frm, doctype,name){\n    var row = frappe.get_doc(doctype, name);\n   if(frm.doc.set_warehouse){\n      row.warehouse = frm.doc.set_warehouse;\n    refresh_field(\"warehouse\", name, \"items\");\n} \n}\n",
  "view": "Form"
 }
]